<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>jvaverka</title>
<link>https://jvaverka.github.io/index.html</link>
<atom:link href="https://jvaverka.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Blog about puzzles and programming</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Fri, 04 Aug 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Welcome!</title>
  <link>https://jvaverka.github.io/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://jvaverka.github.io/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://jvaverka.github.io/posts/welcome/index.html</guid>
  <pubDate>Fri, 04 Aug 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Advent of Code</title>
  <link>https://jvaverka.github.io/posts/advent-of-code/index.html</link>
  <description><![CDATA[ 




<p><a href="https://adventofcode.com/2022">Advent of code</a> is a fantastic opportunity for programmers to hone their skills. Here’s a solution in Julia for Day 1, 2022.</p>
<section id="input-data" class="level2">
<h2 class="anchored" data-anchor-id="input-data">Input Data</h2>
<p>Start by loading data for the sample and our full input.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://adventofcode.com/2022/day/1</span></span>
<span id="cb1-2">example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readlines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"day_1_ex.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>14-element Vector{String}:
 "1000"
 "2000"
 "3000"
 ""
 "4000"
 ""
 "5000"
 "6000"
 ""
 "7000"
 "8000"
 "9000"
 ""
 "10000"</code></pre>
</div>
</div>
<p>Today’s challenge involves counting the inventory of each elf. A logical starting point is to consider the data structure. A simple vector of vectors should well represent all items of all elves.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">struct</span> Inventory</span>
<span id="cb3-2">    items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector{Vector{Int64}}</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
<p><code>Inventory</code> has field <code>items</code> which will hold all the items of a particular elf. In order to create the desired vector of vectors, we want the input to be split by new lines. It is easy to write a function which takes in some vector and splits it by some function.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_elf_input</span>(λ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Function</span>, input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector</span>)</span>
<span id="cb4-2">    first, last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">firstindex</span>(input), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lastindex</span>(input)</span>
<span id="cb4-3">    splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>; <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findall</span>(λ, input); last]</span>
<span id="cb4-4">    split1, split2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> splits[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], splits[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>]</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [input[start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>finish] for (start, finish) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span>(split1, split2)]</span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
<p>We can now write the function that will parse our challenge input into the desired data structure.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Inventory</span>(input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vector{Vector{String}}</span>)</span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter!</span>.(!isempty, input)</span>
<span id="cb5-3">    inventory_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>.(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, i), input)</span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Inventory</span>(inventory_input)</span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
</section>
<section id="solve" class="level2">
<h2 class="anchored" data-anchor-id="solve">Solve</h2>
<p>So, we have everything we need to describe the full elfish inventory. All that’s left is to describe the method of finding the <em>top elf</em>. We can do this in a general way so that we can elect how many of the top elves are returned.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_elf</span>(inventory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Inventory</span>, nelves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapreduce</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nelves) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> elf</span>
<span id="cb6-2">    calories, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findmax</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>.(inventory.items))</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">popat!</span>(inventory.items, index)</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> calories</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span></code></pre></div>
</div>
<p>Parts one and two differ in the number of top elves required. We can write separate functions to accomodate this.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">part_1</span>(input) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_elf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Inventory</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_elf_input</span>(isempty, input)))</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">part_2</span>(input) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_elf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Inventory</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_elf_input</span>(isempty, input)), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Time to solve!</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">part_1</span>(example)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>24000</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">part_2</span>(example)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>45000</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://jvaverka.github.io/posts/advent-of-code/index.html</guid>
  <pubDate>Sun, 27 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://jvaverka.github.io/posts/advent-of-code/aoc.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
