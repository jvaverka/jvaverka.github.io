<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  {{fd2rss website_title}}  ]]>
    </title>
    <link> {{website_url}} </link>
    <description>
      <![CDATA[  {{fd2rss website_description}}  ]]>
    </description>
    <atom:link
      href="{{fd_rss_feed_url}}"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  Packages Versus Projects in Julia  ]]>
  </title>
  <link> https://jvaverka.github.io/posts/packages-versus-projects-in-julia/index.html </link>
  <guid> https://jvaverka.github.io/posts/packages-versus-projects-in-julia/index.html </guid>
  <description>
    <![CDATA[  The Julia ecosystem has Packages &amp; Projects. This short guide attempts to help beginners get started with both.  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<div class="page-tag"><i class="fa fa-tag"></i><a href="https://jvaverka.github.io/tag/code/">code</a>, <a href="https://jvaverka.github.io/tag/julia/">julia</a></div>
<h2 id="packages_versus_projects_in_julia">Packages Versus Projects in Julia</h2>
<div class="franklin-toc"><ol><li>Packages Versus Projects in Julia<ol><li>Pkg.jl</li><li>What is a Package?</li><li>What is a Project?</li></ol></li></ol></div>
<h3 id="pkgjl">Pkg.jl</h3>
<p>One of Julia&#39;s greatest strengths is its package manager, <code>Pkg.jl</code>. My goal here is to give new Julia users some helpful tips to get the most out of <code>Pkg.jl</code> right off the bat. To dive deeper, please check out the <a href="https://pkgdocs.julialang.org/v1/">official documentation</a>.</p>
<h3 id="what_is_a_package">What is a Package?</h3>
<p>A package is a code base that performs some function. I.e., a package does a job, does it well, and nothing more. It is modular.</p>
<p>When multiple things need to be done, we sensibly organize the appropriate code into separate packages. Furthermore, we give these separate packages separate names so that we can understand what job they do well.</p>
<p>Say you want to work with Hyper Text Markup Language &#40;HTML&#41;. <code>HTTP.jl</code> can help send requests and read responses.</p>
<p>Say you want to work with JavaScript Object Notation &#40;JSON&#41;. <code>JSON3.jl</code> can help read and write data in this format.</p>
<p>Say you want to fetch random XKCD comic &#40;there is no meaning&#41;. <code>XKCD.jl</code> can deliver comics to you. The beautiful thing is, that it does so by using <code>HTTP.jl</code> in combination with <code>JSON3.jl</code>.</p>
<p>Packages are the building blocks of the Julia ecosystem. There are many great packages out there, and the ease of creating, distributing, and composing packages allows the ecosystem to rapidly grow.</p>
<p>Those interested in building and sharing their own Julia package should leverage <a href="https://invenia.github.io/PkgTemplates.jl/stable/">PkgTemplates.jl</a> to save time and minimize common mistakes.</p>
<h3 id="what_is_a_project">What is a Project?</h3>
<p>A project is what you create to do stuff.</p>
<p>Slightly more formally, a project is any Julia code base with its own environment. In general, it is always a good idea to create an new environment for new projects. This will minimize the chances of package conflicts. Luckily, creating a new project with a dedicated environment is easy to do. We&#39;ll quickly walk through the steps to create a new project named <code>ImportantWork</code>.</p>
<p>After you have fired up a Julia REPL, indicate that we&#39;ll be using the package manager &#40;we&#39;ll focus only on the most idiomatic way of doing this for now, but there is a <code>Pkg</code> REPL mode accessible with <code>&#93;</code> detailed in the official docs&#41;.</p>
<pre><code class="language-julia-repl">julia&gt; using Pkg</code></pre>
<p>Now to create our project.</p>
<pre><code class="language-julia-repl">julia&gt; Pkg.generate&#40;&quot;ImportantWork&quot;&#41;</code></pre>
<p>The output looks something like this:</p>
<pre><code class="language-text">Generating  project ImportantWork:
    ImportantWork/Project.toml
    ImportantWork/src/ImportantWork.jl
Dict&#123;String, Base.UUID&#125; with 1 entry:
  &quot;ImportantWork&quot; &#61;&gt; UUID&#40;&quot;4b610261-c434-4966-b823-52987c24b398&quot;&#41;</code></pre>
<p>The Julia package manager just generated:</p>
<ul>
<li><p>a directory, <code>ImportantWork</code> ⇒ where everything for the project lives</p>
</li>
<li><p>a subdirectory, <code>ImportantWork/src</code> ⇒ for building our code base</p>
</li>
<li><p>a file, <code>ImportantWork/src/ImportantWork.jl</code> ⇒ a module &#40;think <code>main</code>&#41;</p>
</li>
<li><p>a file, <code>ImportantWork/Project.toml</code> ⇒ for describing the environment</p>
</li>
<li><p>a UUID we won&#39;t worry about for now</p>
</li>
</ul>
<p>Let&#39;s step into our new project with <code>cd</code>.</p>
<pre><code class="language-julia-repl">julia&gt; cd&#40;&quot;ImportantWork&quot;&#41;</code></pre>
<p>And check out <code>Project.toml</code>.</p>
<pre><code class="language-julia-repl">julia&gt; edit&#40;&quot;Project.toml&quot;&#41;</code></pre>
<p>The file contains some basic information about the project&#39;s environment.</p>
<pre><code class="language-text">name &#61; &quot;ImportantWork&quot;
uuid &#61; &quot;4b610261-c434-4966-b823-52987c24b398&quot;
authors &#61; &#91;&quot;Your Name &lt;you@example.com&gt;&quot;&#93;
version &#61; &quot;0.1.0&quot;</code></pre>
<p>To begin working with this new environment, simply activate it.</p>
<pre><code class="language-julia-repl">julia&gt; Pkg.activate&#40;&quot;.&quot;&#41;  # the . here means &#39;this directory&#39;</code></pre>
<p>Now we can continue to the important project work. To do so, we&#39;ll need the important <code>XKCD.jl</code> package. So let&#39;s add it to the project.</p>
<pre><code class="language-julia-repl">julia&gt; Pkg.add&#40;&quot;XKCD&quot;&#41;</code></pre>
<pre><code class="language-text">Updating registry at &#96;~/.julia/registries/General&#96;
   Resolving package versions...
    Updating &#96;~/Repos/ImportantWork/Project.toml&#96;
  &#91;4bc7fa8b&#93; &#43; XKCD v1.0.1
    Updating &#96;~/Repos/ImportantWork/Manifest.toml&#96;
  &#91;cd3eb016&#93; &#43; HTTP v0.9.17
  &#91;83e8ac13&#93; &#43; IniFile v0.5.0
  &#91;0f8b85d8&#93; &#43; JSON3 v1.9.2
  &#91;739be429&#93; &#43; MbedTLS v1.0.3
  &#91;69de0a69&#93; &#43; Parsers v2.2.0
  ...
  &#91;8dfed614&#93; &#43; Test
  &#91;cf7118a7&#93; &#43; UUIDs
  &#91;4ec0a83e&#93; &#43; Unicode
  &#91;c8ffd9c3&#93; &#43; MbedTLS_jll
Precompiling project...
  1 dependency successfully precompiled in 1 seconds &#40;9 already precompiled&#41;</code></pre>
<p>The <code>Project.toml</code> can again tell us what changed. There are 2 new lines.</p>
<pre><code class="language-text">&#91;deps&#93;
XKCD &#61; &quot;4bc7fa8b-4ef2-4643-8c8b-cef036f85839&quot;</code></pre>
<p>Indicating that our project has a new dependency.</p>
<p>We are now free to use the package in our project.</p>
<pre><code class="language-julia-repl">julia&gt; edit&#40;&quot;src/ImportantWork.jl&quot;&#41;</code></pre>
<p>Paste the following code in the file. Save and quit.</p>
<pre><code class="language-julia">module ImportantWorkusing XKCDexport meaning_of_life
export life_onlinemeaning_of_life&#40;&#41; &#61; XKCD.Comic&#40;42&#41;
life_online&#40;&#41; &#61; XKCD.Comic&#40;256&#41;end # module</code></pre>
<p>Finally, we can get the answers we seek. Furthermore, if we are sure to include the <code>Project.toml</code> then we can share our important work with others. Then they too can get the answers.</p>
<pre><code class="language-julia-repl">julia&gt; using ImportantWork
julia&gt; meaning_of_life&#40;&#41;</code></pre>
<p><img src="./geico.jpg" alt="geico" /></p>
<pre><code class="language-julia-repl">julia&gt; life_online&#40;&#41;</code></pre>
<p><img src="./online_communities.png" alt="online-communities" /></p>
 ]]>
  </content:encoded>
    
  <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Vaverka</atom:name>
  </atom:author>
        
</item>
</channel></rss>